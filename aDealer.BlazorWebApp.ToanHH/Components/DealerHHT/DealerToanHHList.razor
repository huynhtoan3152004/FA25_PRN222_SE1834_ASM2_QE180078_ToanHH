@page "/dealers"
@rendermode InteractiveServer
@using aDealerEDVMS.Repository.ToanHH.Models
@using aDealerEDVMS.Service.ToanHH
@inject IServiceProviders ServiceProviders
@inject NavigationManager Navigation

<PageTitle>Dealer List</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h3>Danh Sách Đại Lý</h3>
    <a href="/dealers/create" class="btn btn-primary">
        <i class="bi bi-plus-circle me-2"></i>Thêm Đại Lý Mới
    </a>
</div>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="bi bi-check-circle me-2"></i>@message
        <button type="button" class="btn-close" @onclick="() => message = null"></button>
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="bi bi-exclamation-circle me-2"></i>@errorMessage
        <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
    </div>
}

<div class="card mb-4">
    <div class="card-header bg-primary text-white">
        <h5 class="mb-0"><i class="bi bi-search me-2"></i>Tìm Kiếm Đại Lý</h5>
    </div>
    <div class="card-body">
        <div class="row g-3">
            <div class="col-md-4">
                <label class="form-label">Tên / Mã Đại Lý</label>
                <input type="text" class="form-control" @bind="searchDealerName" 
                       placeholder="Nhập tên hoặc mã đại lý..." />
            </div>
            <div class="col-md-4">
                <label class="form-label">Địa Chỉ</label>
                <input type="text" class="form-control" @bind="searchAddress" 
                       placeholder="Nhập địa chỉ..." />
            </div>
            <div class="col-md-4">
                <label class="form-label">Đánh Giá Tối Thiểu</label>
                <select class="form-select" @bind="searchRating">
                    <option value="0">Tất cả</option>
                    <option value="1">≥ 1 sao</option>
                    <option value="2">≥ 2 sao</option>
                    <option value="3">≥ 3 sao</option>
                    <option value="4">≥ 4 sao</option>
                    <option value="5">5 sao</option>
                </select>
            </div>
        </div>
        <div class="mt-3">
            <button class="btn btn-primary me-2" @onclick="SearchDealers">
                <i class="bi bi-search me-1"></i>Tìm Kiếm
            </button>
            <button class="btn btn-secondary" @onclick="ClearSearch">
                <i class="bi bi-x-circle me-1"></i>Xóa Bộ Lọc
            </button>
        </div>
    </div>
</div>

@if (dealers == null)
{
    <div class="text-center my-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-3"><em>Đang tải dữ liệu...</em></p>
    </div>
}
else if (!dealers.Any())
{
    <div class="alert alert-info">
        <i class="bi bi-info-circle me-2"></i>Không tìm thấy đại lý nào.
    </div>
}
else
{
    <div class="d-flex justify-content-between align-items-center mb-3">
        <div>
            <strong>Hiển thị:</strong> @((currentPage - 1) * pageSize + 1) - @Math.Min(currentPage * pageSize, dealers.Count) 
            trong tổng số <strong>@dealers.Count</strong> đại lý
        </div>
        <div>
            <label class="me-2">Số dòng/trang:</label>
            <select class="form-select form-select-sm d-inline-block w-auto" @bind="pageSize" @bind:after="ResetPagination">
                <option value="5">5</option>
                <option value="10">10</option>
                <option value="20">20</option>
                <option value="50">50</option>
            </select>
        </div>
    </div>

    <div class="table-responsive">
        <table class="table table-striped table-hover align-middle">
            <thead class="table-dark">
                <tr>
                    <th>ID</th>
                    <th>Mã Đại Lý</th>
                    <th>Tên Đại Lý</th>
                    <th>Địa Chỉ</th>
                    <th>Điện Thoại</th>
                    <th>Email</th>
                    <th>Ngày Thành Lập</th>
                    <th>Số Nhân Viên</th>
                    <th>Đánh Giá</th>
                    <th>Trạng Thái</th>
                    <th style="width: 120px;" class="text-center">Thao Tác</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var dealer in GetPagedDealers())
                {
                    <tr>
                        <td><strong>@dealer.DealerId</strong></td>
                        <td><span class="badge bg-info text-dark">@dealer.DealerCode</span></td>
                        <td>@dealer.DealerName</td>
                        <td>@dealer.Address</td>
                        <td><i class="bi bi-telephone me-1"></i>@dealer.Phone</td>
                        <td><i class="bi bi-envelope me-1"></i>@dealer.Email</td>
                        <td>@(dealer.EstablishedDate?.ToString("dd/MM/yyyy") ?? "N/A")</td>
                        <td class="text-center">@(dealer.TotalStaff?.ToString() ?? "N/A")</td>
                        <td>
                            @if (dealer.Rating.HasValue)
                            {
                                <span class="badge bg-warning text-dark">
                                    <i class="bi bi-star-fill me-1"></i>@dealer.Rating.Value.ToString("0.0")
                                </span>
                            }
                            else
                            {
                                <span class="text-muted">Chưa có</span>
                            }
                        </td>
                        <td>
                            @if (dealer.IsActive == true)
                            {
                                <span class="badge bg-success">
                                    <i class="bi bi-check-circle me-1"></i>Hoạt động
                                </span>
                            }
                            else
                            {
                                <span class="badge bg-secondary">
                                    <i class="bi bi-x-circle me-1"></i>Không hoạt động
                                </span>
                            }
                        </td>
                        <td class="text-center">
                            <a href="/dealers/detail/@dealer.DealerId" 
                               class="btn btn-sm btn-info text-white" 
                               title="Chi tiết">
                                <i class="bi bi-eye me-1"></i>Chi Tiết
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @if (TotalPages > 1)
    {
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => ChangePage(1)" disabled="@(currentPage == 1)">
                        <i class="bi bi-chevron-double-left"></i>
                    </button>
                </li>
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => ChangePage(currentPage - 1)" disabled="@(currentPage == 1)">
                        <i class="bi bi-chevron-left"></i>
                    </button>
                </li>

                @for (int i = GetStartPage(); i <= GetEndPage(); i++)
                {
                    var page = i;
                    <li class="page-item @(currentPage == page ? "active" : "")">
                        <button class="page-link" @onclick="() => ChangePage(page)"><Component1 /></button>
                    </li>
                }

                <li class="page-item @(currentPage == TotalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="() => ChangePage(currentPage + 1)" disabled="@(currentPage == TotalPages)">
                        <i class="bi bi-chevron-right"></i>
                    </button>
                </li>
                <li class="page-item @(currentPage == TotalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="() => ChangePage(TotalPages)" disabled="@(currentPage == TotalPages)">
                        <i class="bi bi-chevron-double-right"></i>
                    </button>
                </li>
            </ul>
        </nav>
    }
}

<style>
    .table td {
        vertical-align: middle;
    }

    .btn-info.text-white:hover {
        background-color: #0ca5c7;
        border-color: #0b95b5;
    }

    .badge {
        padding: 0.5em 0.75em;
        font-weight: 500;
    }

    .alert {
        border-left: 4px solid;
    }

    .alert-success {
        border-left-color: #198754;
    }

    .alert-danger {
        border-left-color: #dc3545;
    }

    .alert-info {
        border-left-color: #0dcaf0;
    }

    .pagination .page-link {
        color: #0d6efd;
    }

    .pagination .page-item.active .page-link {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }

    .pagination .page-item.disabled .page-link {
        cursor: not-allowed;
    }

    .card-header {
        font-weight: 500;
    }
</style>

@code {
    private List<DealersHht>? dealers;
    private string? message;
    private string? errorMessage;

    // Search parameters
    private string searchDealerName = string.Empty;
    private string searchAddress = string.Empty;
    private decimal searchRating = 0;

    // Pagination
    private int currentPage = 1;
    private int pageSize = 10;
    private int TotalPages => dealers != null && dealers.Any() 
        ? (int)Math.Ceiling(dealers.Count / (double)pageSize) 
        : 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadDealers();
    }

    private async Task LoadDealers()
    {
        try
        {
            dealers = await ServiceProviders.DealersHhtService.GetAllAsync();
            currentPage = 1;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dealers: {ex.Message}");
            errorMessage = "Không thể tải danh sách đại lý!";
            dealers = new List<DealersHht>();
        }
    }

    private async Task SearchDealers()
    {
        try
        {
            dealers = await ServiceProviders.DealersHhtService.SearchAsync(
                searchDealerName, 
                searchRating, 
                searchAddress);
            
            currentPage = 1; // Reset về trang 1 khi search
            
            if (!dealers.Any())
            {
                message = "Không tìm thấy đại lý nào phù hợp với tiêu chí tìm kiếm.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error searching dealers: {ex.Message}");
            errorMessage = "Có lỗi xảy ra khi tìm kiếm đại lý!";
            dealers = new List<DealersHht>();
        }
    }

    private async Task ClearSearch()
    {
        searchDealerName = string.Empty;
        searchAddress = string.Empty;
        searchRating = 0;
        message = null;
        await LoadDealers();
    }

    private List<DealersHht> GetPagedDealers()
    {
        if (dealers == null || !dealers.Any())
            return new List<DealersHht>();

        return dealers
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void ChangePage(int page)
    {
        if (page < 1 || page > TotalPages)
            return;

        currentPage = page;
    }

    private void ResetPagination()
    {
        currentPage = 1;
    }

    private int GetStartPage()
    {
        var startPage = currentPage - 2;
        return Math.Max(1, startPage);
    }

    private int GetEndPage()
    {
        var endPage = currentPage + 2;
        return Math.Min(TotalPages, endPage);
    }
}